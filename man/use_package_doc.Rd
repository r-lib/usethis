% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/documentation.R
\name{use_package_doc}
\alias{use_package_doc}
\title{Package-level documentation}
\usage{
use_package_doc(open = rlang::is_interactive())
}
\arguments{
\item{open}{Open the newly created file for editing? Happens in RStudio, if
applicable, or via \code{\link[utils:file.edit]{utils::file.edit()}} otherwise.}
}
\description{
Adds a dummy \code{.R} file that will cause roxygen2 to generate basic
package-level documentation. If your package is named "foo", this will make
help available to the user via \code{?foo} or \code{package?foo}. Once you call
\code{devtools::document()}, roxygen2 will flesh out the \code{.Rd} file using data
from the \code{DESCRIPTION}. That ensures you don't need to repeat (and remember
to update!) the same information in multiple places. This \code{.R} file is also a
good place for roxygen directives that apply to the whole package (vs. a
specific function), such as global namespace tags like \verb{@importFrom}.
}
\details{
There is one tricky case: when a \strong{package} named "foo" also has a
\strong{function} named \code{foo()}. In this case, after running \code{use_package_doc()},
there will be an \verb{R CMD check} warning. The solution is to set the \verb{@aliases}
for the package-level help topic by modifying the dummy \code{.R} file (e.g.,
\code{foo-package.R}) as shown below (but substitute the name of your package /
function for "foo"):

\if{html}{\out{<div class="sourceCode">}}\preformatted{#' @keywords internal
#' @aliases foo-package
#' "_PACKAGE"
}\if{html}{\out{</div>}}
}
\seealso{
The \href{https://r-pkgs.org/man.html}{documentation chapter} of \href{https://r-pkgs.org}{R Packages}
}
