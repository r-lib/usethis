% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pr.R
\name{pull-requests}
\alias{pull-requests}
\alias{pr_init}
\alias{pr_fetch}
\alias{pr_push}
\alias{pr_pull}
\alias{pr_pull_upstream}
\alias{pr_sync}
\alias{pr_view}
\alias{pr_pause}
\alias{pr_finish}
\title{Helpers for GitHub pull requests}
\usage{
pr_init(branch)

pr_fetch(number, owner = NULL)

pr_push()

pr_pull()

pr_pull_upstream()

pr_sync()

pr_view()

pr_pause()

pr_finish(number = NULL)
}
\arguments{
\item{branch}{branch name. Should usually consist of lower case letters,
numbers, and \code{-}.}

\item{number}{Number of PR to fetch.}

\item{owner}{Name of the owner of the repository that is the target of the
pull request. Default of \code{NULL} tries to identify the source repo and uses
the owner of the \code{upstream} remote, if present, or the owner of \code{origin}
otherwise.}
}
\description{
The \verb{pr_*} family of functions is designed to make working with GitHub pull
requests (PRs) as painless as possible for both contributors and package
maintainers. They are designed to support the Git and GitHub best practices
described in \href{https://happygitwithr.com}{Happy Git and GitHub for the useR}.
To use the \verb{pr_*} functions, your project must be a Git repo and have one of
these GitHub remote configurations:
\itemize{
\item "ours": You can push to the GitHub remote configured as \code{origin}. It's not
a fork.
\item "fork": You can push to the GitHub remote configured as \code{origin}, it's a
fork, and its parent is configured as \code{upstream}.
}

"Ours" and "fork" are two of several GitHub remote configurations examined in
\href{https://happygitwithr.com/common-remote-setups.html}{Common remote setups}
in Happy Git.
}
\section{Required setup}{

The \verb{pr_*} functions interact with GitHub both as a conventional Git remote
and via the REST API. Therefore, your credentials must be discoverable. Which
credentials do we mean?
\itemize{
\item A GitHub personal access token (PAT) must be configured as the \code{GITHUB_PAT}
environment variable. \code{\link[=create_github_token]{create_github_token()}} helps you do this. This PAT
allows usethis to call the GitHub API on your behalf. If you use HTTPS
remotes, the PAT is also used for, e.g., \verb{git push}. That means the PAT is
all you need to setup! Highly recommended for those new to Git and GitHub and
PRs.
\item If you use SSH remotes, your SSH keys must also be discoverable.
}

Usethis uses the gert package for Git operations
(\url{https://docs.ropensci.org/gert}) and gert, in turn, relies on the
credentials package (\url{https://docs.ropensci.org/credentials/}) for auth. If
you have credential problems, focus your troubleshooting on getting the
credentials package to find your credentials.

If the \verb{pr*} functions need to configure a new remote, its transport protocol
(HTTPS vs SSH) is determined by the protocol used for \code{origin}.
}

\section{For contributors}{

To contribute to a package, first use \code{create_from_github("OWNER/REPO", fork = TRUE)} to fork the source repository, and then check out a local copy.

Next use \code{pr_init()} to create a branch for your PR. It is best practice to
never make commits to the \code{master} (or default) branch of a fork, because you
do not own it. A pull request should always come from a feature branch. It
will be much easier to pull upstream changes from the fork parent if you only
allow yourself to work in feature branches. It is also much easier for a
maintainer to explore and extend your PR if you create a feature branch.

Work locally, in your branch, making changes to files, and committing your
work. Once you're ready to create the PR, run \code{pr_push()} to push your local
branch to GitHub, and open a webpage that lets you initiate the PR (or draft
PR).

To learn more about the process of making a pull request, read the \href{https://usethis.r-lib.org/articles/articles/pr-functions.html}{Pull Request Helpers}
vignette.

If you are lucky, your PR will be perfect, and the maintainer will accept it.
You can then run \code{pr_finish()} to close and delete your PR branch. In most
cases, however, the maintainer will ask you to make some changes. Make the
changes, then run \code{pr_push()} to sync back up to GitHub.

It's also possible that the maintainer will contribute some code to your PR:
to get that code back to your computer, run \code{pr_pull()}. It can also happen
that other changes have occurred in the package since you first created your
PR. You might need to merge the \code{master} (or default) branch into your PR
branch. Do that by running \code{pr_pull_upstream()}: this makes sure that your
copy of the package is up-to-date with the maintainer's latest changes. Both
\code{pr_pull()} and \code{pr_pull_upstream()} can result in merge conflicts, so be
prepared to resolve before continuing.
}

\section{For maintainers}{

To download a PR locally so that you can experiment with it, run
\verb{pr_fetch(<pr_number>)}. If you make changes, run \code{pr_push()} to push them
back to GitHub. After you have merged the PR, run \code{pr_finish()} to delete the
local branch and remove the remote associated with the contributor's fork.
}

\section{Other helpful functions}{

\itemize{
\item \code{pr_sync()} is a shortcut for \code{pr_pull()}, \code{pr_pull_upstream()}, and
\code{pr_push()}.
\item \code{pr_pause()} makes sure you're synced with the PR and then switches back to
master.
\item \code{pr_view()} opens the PR in the browser.
}
}

\examples{
\dontrun{
## scenario: current project is a local copy of fork of a repo owned by
## 'tidyverse', not you
pr_fetch(123, owner = "tidyverse")
}
}
